generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  googleId  String   @unique
  name      String?
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  artist    Artist?
  likes     Like[]   @relation("UserLikes")
}

model Artist {
  userId         String   @id
  user           User     @relation(fields: [userId], references: [id])

  city           String
  country        String
  countryCode    String?  @db.VarChar(2)
  address        String
  nickname       String
  description    String
  styles         String[]
  instagram      String
  email          String?
  website        String?
  tiktok         String?
  facebook       String?
  telegram       String?
  whatsapp       String?
  wechat         String?
  snapchat       String?
  avatar         String
  beginner       Boolean  @default(false)
  coverups       Boolean  @default(false)
  color          Boolean  @default(false)
  blackAndGray   Boolean  @default(false)
  photos         String[] @default([])
  lat            Decimal? @db.Decimal(9, 6)
  lon            Decimal? @db.Decimal(9, 6)

  regionName     String?           // "Flevoland"
  regionCode     String?           // "FL"
  regionCodeFull String?           // "NL-FL"
  postcode       String?           // "3894 AC"
  streetName     String?           // "Wijenburg"
  addressNumber  String?           // "8"

  routableLat    Decimal? @db.Decimal(9, 6)
  routableLon    Decimal? @db.Decimal(9, 6)

  geoRaw         Json?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  likes          Like[]   @relation("ArtistLikes")

  @@index([countryCode])
  @@index([regionCodeFull])
  @@index([city])
  @@index([postcode])
  @@index([lat, lon])
  @@index([nickname])
  @@index([beginner, color, blackAndGray])
}

model Like {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  artistId  String   @map("artist_id")
  createdAt DateTime @default(now())

  user   User   @relation(name: "UserLikes", fields: [userId], references: [id])
  artist Artist @relation(name: "ArtistLikes", fields: [artistId], references: [userId])

  @@unique([userId, artistId])
  @@index([artistId])
  @@map("likes")
}
